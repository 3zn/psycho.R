geom_density(fill=fillcolor, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score, size = 2, color=linecolor) +
xlab("") +
ylab("")
output <- list(text=text, plot=plot, values=values)
class(output) <- c("psycho", "list")
return(output)
}
x <- assess(1.2)
library(tidyverse)
x <- assess(1.2)
library(ReporteRs)
install.packages("rtf")
library(rtf)
rtf <- rtf::RTF(-"test_RTF-class.doc", width=8.5,height=11, font.size=10, omi=c(1,1,1,1))
rtf <- rtf::RTF("test_RTF-class.doc", width=8.5,height=11, font.size=10, omi=c(1,1,1,1))
addSessionInfo(rtf)
done(rtf)
setwd("D:/Programs/Dropbox/RECHERCHE/N/psycho.R")
rtf <- rtf::RTF("test_RTF-class.docx", width=8.5,height=11, font.size=10, omi=c(1,1,1,1))
rtf::addHeader(rtf, title="Test", subtitle="2011-08-15\n")
# addPlot(rtf, plot.fun=plot, width=6, height=6, res=300, iris[,1],iris[,2])
rtf::addSessionInfo(rtf)
rtf::done(rtf)
rtf <- rtf::RTF("test_RTF-class.rtf", width=8.5,height=11, font.size=10, omi=c(1,1,1,1))
rtf::addHeader(rtf, title="Test", subtitle="2011-08-15\n")
# addPlot(rtf, plot.fun=plot, width=6, height=6, res=300, iris[,1],iris[,2])
rtf::addSessionInfo(rtf)
rtf::done(rtf)
score <- 1.2
deparse(score)
#' Compare a score to a parent population.
#'
#' Compare a given score to a parent population.
#'
#' @param score The score.
#' @param mean The general population's mean.
#' @param sd The general population's standart deviation.
#' @param linecolor The colour of the vertical line.
#' @param fillcolor The colour of the density plot.
#'
#' @return output
#'
#' @examples
#' assess(124, mean=100, sd=15)
#'
#' @importFrom stats ecdf
#' @import ggplot2
#' @import dplyr
#' @export
assess <- function(score, mean=0, sd=1, linecolor="#E91E63", fillcolor="#2196F3") {
# Values
# -------------
values <- list()
values$psycho_function <- "assess"
values$psycho_name <- deparse(score)
values$percentile <- stats::ecdf(stats::rnorm(50000, mean=mean, sd=sd))(score)
# Text
# -------------
text <- "Text for assess"
# Plot
# -------------
plot <- stats::rnorm(50000, mean=mean, sd=sd) %>%
data.frame() %>%
rename("Parent Distribution" = ".") %>%
ggplot(aes_(x="Parent Distribution")) +
geom_density(fill=fillcolor, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score, size = 2, color=linecolor) +
xlab("") +
ylab("")
output <- list(text=text, plot=plot, values=values)
class(output) <- c("psycho", "list")
return(output)
}
x <- assess(1.2)
values <- x$values
filename <- paste(values$psycho_function, values$psycho_name, sep="")
filename
filename <- paste(filename, ".rtf")
print("TO DO: creat Docx or rtf files with tables, text and plots.")
filename <- paste(values$psycho_function, values$psycho_name, sep="_")
filename <- paste(filename, ".rtf")
filename
filename <- paste(values$psycho_function, values$psycho_name, sep="_")
filename <- paste(filename, ".rtf", sep="")
filename
assess(c(1.2, 1, 2))
x <- assess(c(1.2, 1, 2))
x$values
plot(x)
typeof(score)
score <- 1.2
typeof(score)
score <- c(1, 4, 5)
typeof(score)
length(score)
warning('score is a list. Only a dataframe is returned.')
#' Compare a score to a parent population.
#'
#' Compare a given score to a parent population.
#'
#' @param score The score.
#' @param mean The general population's mean.
#' @param sd The general population's standart deviation.
#' @param linecolor The colour of the vertical line.
#' @param fillcolor The colour of the density plot.
#'
#' @return output
#'
#' @examples
#' assess(124, mean=100, sd=15)
#'
#' @importFrom stats ecdf
#' @import ggplot2
#' @import dplyr
#' @export
assess <- function(score, mean=0, sd=1, linecolor="#E91E63", fillcolor="#2196F3") {
# Values
# -------------
values <- list()
values$psycho_function <- "assess"
values$psycho_name <- deparse(score)
values$percentile <- stats::ecdf(stats::rnorm(50000, mean=mean, sd=sd))(score)
if (length(score) > 1){
warning('The score provided to assess() is a list. Only a dataframe is returned.')
output <- data.frame(percentile=values$percentile)
return(output)
}
# Text
# -------------
text <- "Text for assess"
# Plot
# -------------
plot <- stats::rnorm(50000, mean=mean, sd=sd) %>%
data.frame() %>%
rename("Parent Distribution" = ".") %>%
ggplot(aes_(x="Parent Distribution")) +
geom_density(fill=fillcolor, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score, size = 2, color=linecolor) +
xlab("") +
ylab("")
output <- list(text=text, plot=plot, values=values)
class(output) <- c("psycho", "list")
return(output)
}
assess(1.2)
x <- assess(c(1,2,3))
View(x)
values$z_score <- (score-mean)/sd
#' Compare a score to a parent population.
#'
#' Compare a given score to a parent population.
#'
#' @param score The score.
#' @param mean The general population's mean.
#' @param sd The general population's standart deviation.
#' @param linecolor The colour of the vertical line.
#' @param fillcolor The colour of the density plot.
#' @param verbose Print possible warnings.
#'
#' @return output
#'
#' @examples
#' assess(124, mean=100, sd=15)
#'
#' @importFrom stats ecdf
#' @import ggplot2
#' @import dplyr
#' @export
assess <- function(score, mean=0, sd=1, linecolor="#E91E63", fillcolor="#2196F3", verbose=T) {
# Values
# -------------
values <- list()
values$psycho_function <- "assess"
values$psycho_name <- deparse(score)
values$percentile <- stats::ecdf(stats::rnorm(50000, mean=mean, sd=sd))(score)
values$z_score <- (score-mean)/sd
if (length(score) > 1){
if (verbose == T){
warning('Multiple scores were provided. Only a dataframe is returned.')
}
output <- data.frame(Percentile=values$percentile, Z_Score=values$z_score)
return(output)
}
# Text
# -------------
text <- "Text for assess"
# Plot
# -------------
plot <- stats::rnorm(50000, mean=mean, sd=sd) %>%
data.frame() %>%
rename("Parent Distribution" = ".") %>%
ggplot(aes_(x="Parent Distribution")) +
geom_density(fill=fillcolor, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score, size = 2, color=linecolor) +
xlab("") +
ylab("")
output <- list(text=text, plot=plot, values=values)
class(output) <- c("psycho", "list")
return(output)
}
assess(1.2)
x <- assess(c(1,2,3))
View(x)
x <- assess(1.2)
values <- x$values
filename <- paste(values$psycho_function, values$psycho_name, sep="_")
filename <- paste(filename, ".rtf", sep="")
save.psycho <- function(x){
values <- x$values
filename <- paste(values$psycho_function, values$psycho_name, sep="_")
filename <- paste(filename, ".rtf", sep="")
rtf <- rtf::RTF(filename, width=8.5, height=11, font.size=12, omi=c(1,1,1,1))
rtf::addHeader(rtf, title=values$psycho_function, subtitle=values$psycho_name)
addPlot(rtf, plot.fun=x$plot, width=6, height=6, res=300)
rtf::addSessionInfo(rtf)
rtf::done(rtf)
}
x <- assess(1.2)
save(x)
#' Save the results.
#'
#' @param x A psycho class object
#'
#' @export
save.psycho <- function(x, ...){
values <- x$values
filename <- paste(values$psycho_function, values$psycho_name, sep="_")
filename <- paste(filename, ".rtf", sep="")
rtf <- rtf::RTF(filename, width=8.5, height=11, font.size=12, omi=c(1,1,1,1))
rtf::addHeader(rtf, title=values$psycho_function, subtitle=values$psycho_name)
addPlot(rtf, plot.fun=x$plot, width=6, height=6, res=300)
rtf::addSessionInfo(rtf)
rtf::done(rtf)
}
x <- assess(1.2)
save(x)
x <- assess(1.2)
class(x)
save(x)
#' Save the results.
#'
#' @param x A psycho class object
#'
#' @export
save.psycho <- function(x, file, ...){
# values <- x$values
# filename <- paste(values$psycho_function, values$psycho_name, sep="_")
# filename <- paste(filename, ".rtf", sep="")
rtf <- rtf::RTF(file, width=8.5, height=11, font.size=12, omi=c(1,1,1,1))
rtf::addHeader(rtf, title=values$psycho_function, subtitle=values$psycho_name)
addPlot(rtf, plot.fun=x$plot, width=6, height=6, res=300)
rtf::addSessionInfo(rtf)
rtf::done(rtf)
return(rtf)
}
save(x)
#' Save the results.
#'
#' @param x A psycho class object
#'
#' @export
save.psycho <- function(x, file, ...){
# values <- x$values
# filename <- paste(values$psycho_function, values$psycho_name, sep="_")
filename <- paste(file, ".rtf", sep="")
rtf <- rtf::RTF(filename, width=8.5, height=11, font.size=12, omi=c(1,1,1,1))
rtf::addHeader(rtf, title=values$psycho_function, subtitle=values$psycho_name)
addPlot(rtf, plot.fun=x$plot, width=6, height=6, res=300)
rtf::addSessionInfo(rtf)
rtf::done(rtf)
return(rtf)
}
save(x, "dupa")
save.psycho(x, "dupa")
#' Save the results.
#'
#' @param x A psycho class object
#'
#' @export
save.psycho <- function(x, file, ...){
# values <- x$values
# filename <- paste(values$psycho_function, values$psycho_name, sep="_")
filename <- paste(file, ".rtf", sep="")
rtf <- rtf::RTF(filename, width=8.5, height=11, font.size=12, omi=c(1,1,1,1))
rtf::addHeader(rtf, title=values$psycho_function, subtitle=values$psycho_name)
rtf::addPlot(rtf, plot.fun=x$plot, width=6, height=6, res=300)
rtf::addSessionInfo(rtf)
rtf::done(rtf)
return(rtf)
}
save.psycho(x, "dupa")
#' Save the results.
#'
#' @param x A psycho class object
#'
#' @export
save.psycho <- function(x, file, ...){
# values <- x$values
# filename <- paste(values$psycho_function, values$psycho_name, sep="_")
filename <- paste(file, ".rtf", sep="")
rtf <- rtf::RTF(filename, width=8.5, height=11, font.size=12, omi=c(1,1,1,1))
rtf::addHeader(rtf, title=values$psycho_function, subtitle=values$psycho_name)
rtf::addPlot(rtf, plot=x$plot, width=6, height=6, res=300)
rtf::addSessionInfo(rtf)
rtf::done(rtf)
return(rtf)
}
save.psycho(x, "dupa")
#' Save the results.
#'
#' @param x A psycho class object
#'
#' @export
save.psycho <- function(x, file, ...){
# values <- x$values
# filename <- paste(values$psycho_function, values$psycho_name, sep="_")
filename <- paste(file, ".rtf", sep="")
rtf <- rtf::RTF(filename, width=8.5, height=11, font.size=12, omi=c(1,1,1,1))
rtf::addHeader(rtf, title=values$psycho_function, subtitle=values$psycho_name)
rtf::addPlot(rtf, plot=x$plot, width=6, height=6, res=300)
rtf::addSessionInfo(rtf)
rtf::done(rtf)
return(rtf)
}
save.psycho(x, "dupa")
x$plot
#' Compare a score to a parent population.
#'
#' Compare a given score to a parent population.
#'
#' @param score The score.
#' @param mean The general population's mean.
#' @param sd The general population's standart deviation.
#' @param linecolor The colour of the vertical line.
#' @param fillcolor The colour of the density plot.
#' @param verbose Print possible warnings.
#'
#' @return output
#'
#' @examples
#' assess(124, mean=100, sd=15)
#'
#' @importFrom stats ecdf
#' @import ggplot2
#' @import dplyr
#' @export
assess <- function(score, mean=0, sd=1, linecolor="#E91E63", fillcolor="#2196F3", verbose=T) {
# Values
# -------------
values <- list()
values$psycho_function <- "assess"
values$psycho_name <- deparse(score)
values$percentile <- stats::ecdf(stats::rnorm(50000, mean=mean, sd=sd))(score)
values$z_score <- (score-mean)/sd
# If score is list
if (length(score) > 1){
if (verbose == T){
warning('Multiple scores were provided. Only a dataframe is returned.')
}
output <- data.frame(Percentile=values$percentile, Z_Score=values$z_score)
return(output)
}
# Text
# -------------
text <- "Text for assess"
# Plot
# -------------
plot <- stats::rnorm(50000, mean=mean, sd=sd) %>%
data.frame() %>%
rename("Parent Distribution" = ".") %>%
ggplot(aes_(x="Parent Distribution")) +
geom_density(fill=fillcolor, colour="white", adjust = 3, na.rm=TRUE) +
geom_vline(xintercept=score, size = 2, color=linecolor) +
xlab("") +
ylab("")
output <- list(text=text, plot=plot, values=values)
class(output) <- c("psycho", "list")
return(output)
}
x <- assess(1.2)
x$plot
x$plot
print(x$plot)
x$plot
plot(x$plot)
x$plot
plot(x)
library(psycho)
x <- assess(1.3)
class(x = )
class(x)
save(x)
save(x, "dupa")
print(x)
plot(x)
values(x)
library(psycho)
write(x)
class(x)
write(x)
psycho::write.psycho(x)
write.psycho(x)
file = "data"
filename <- paste(file, ".rtf", sep="")
rtf <- rtf::RTF(filename, width=8.5, height=11, font.size=12, omi=c(1,1,1,1))
rtf::addHeader(rtf, title=values$psycho_function, subtitle=values$psycho_name)
rtf::addPlot(rtf, plot.fun=x$plot, width=6, height=6, res=300)
rtf::addSessionInfo(rtf)
rtf::done(rtf)
library(psycho)
write(x)
write(x, file="data")
write.psycho(x)
library(psycho)
write.psycho(x)
library(psycho)
write.psycho(x)
library(psycho)
write.psycho(x)
print(x$plot)
setwd("C:/Users/Dom/Desktop")
library(psycho)
library(psycho)
output <- assess(1.2)
print(output)
values(output)
plot(output)
save(output)
save_file(output)
score <- 1.2
mean=0
sd=1
linecolor="#E91E63"
fillcolor="#2196F3"
values <- list()
values$psycho_function <- "assess"
values$psycho_name <- deparse(score)
values$percentile <- stats::ecdf(stats::rnorm(50000, mean=mean, sd=sd))(score)
values$z_score <- (score-mean)/sd
values <- data.frame(Function=values$psycho_function)
library(psycho)
score <- 1.2
values <- list()
values$psycho_function <- "assess"
values$psycho_name <- deparse(score)
values$percentile <- stats::ecdf(stats::rnorm(50000, mean=mean, sd=sd))(score)
values$z_score <- (score-mean)/sd
summary <- data.frame(Function=values$psycho_function)
summary$Score <- data.frame(Score=score)
View(summary)
score
values <- list()
values$psycho_function <- "assess"
values$psycho_name <- deparse(score)
values$percentile <- stats::ecdf(stats::rnorm(50000, mean=mean, sd=sd))(score)
values$z_score <- (score-mean)/sd
summary <- data.frame(Score=score)
library(psycho)
output <- assess(1.2)
print(output)
values(output)
plot(output)
summary(output)
save_file(output)
output <- assess(1.2)
assess(1.2)
library(psycho)
save_file(output)
library(psycho)
save_file(output)
x <- output
values <- x$values
filename <- paste(file, ".rtf", sep="")
rtf <- rtf::RTF(filename, width=8.5, height=11, font.size=12, omi=c(1,1,1,1))
file="results"
values <- x$values
filename <- paste(file, ".rtf", sep="")
rtf <- rtf::RTF(filename, width=8.5, height=11, font.size=12, omi=c(1,1,1,1))
summary <- x$summary
gsub("\\."," ", colnames(summary))
colnames(summary) <- gsub("\\."," ", colnames(summary)) # format column names
addTable(rtf, tab, font.size=9, row.names=FALSE, NA.string="-")
rtf::addTable(rtf, tab, font.size=9, row.names=FALSE, NA.string="-")
#' Save the results to a file.
#'
#' @param x A psycho class object.
#' @param file The Filename.
#'
#' @import rtf
#' @export
save_file <- function(x, file="results"){
# Initialize
values <- x$values
filename <- paste(file, ".rtf", sep="")
rtf <- rtf::RTF(filename, width=8.5, height=11, font.size=12, omi=c(1,1,1,1))
# Summary
summary <- x$summary
colnames(summary) <- gsub("\\."," ", colnames(summary)) # format column names
rtf::addTable(rtf, tab, font.size=9, row.names=FALSE, NA.string="-")
# Plot
rtf::addHeader(rtf, title=values$psycho_function, subtitle=values$psycho_name)
print(x$plot)
rtf::addPlot(rtf, plot.fun=print, width=6, height=6, res=300, x$plot)
# SessionInfo
rtf::addSessionInfo(rtf)
rtf::done(rtf)
}
save_file(output)
class(rtf)
rtf <- rtf::RTF(filename, width=8.5, height=11, font.size=12, omi=c(1,1,1,1))
class(rtf)
